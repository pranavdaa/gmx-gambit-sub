// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  TypedMap,
  Entity,
  Value,
  ValueKind,
  store,
  Bytes,
  BigInt,
  BigDecimal,
} from "@graphprotocol/graph-ts";

export class FeeBasisPoint extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save FeeBasisPoint entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type FeeBasisPoint must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`,
      );
      store.set("FeeBasisPoint", id.toString(), this);
    }
  }

  static loadInBlock(id: string): FeeBasisPoint | null {
    return changetype<FeeBasisPoint | null>(
      store.get_in_block("FeeBasisPoint", id),
    );
  }

  static load(id: string): FeeBasisPoint | null {
    return changetype<FeeBasisPoint | null>(store.get("FeeBasisPoint", id));
  }

  get id(): string {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get swap(): BigInt {
    let value = this.get("swap");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set swap(value: BigInt) {
    this.set("swap", Value.fromBigInt(value));
  }

  get stableSwap(): BigInt {
    let value = this.get("stableSwap");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set stableSwap(value: BigInt) {
    this.set("stableSwap", Value.fromBigInt(value));
  }

  get margin(): BigInt {
    let value = this.get("margin");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set margin(value: BigInt) {
    this.set("margin", Value.fromBigInt(value));
  }

  get liquidation(): BigInt {
    let value = this.get("liquidation");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set liquidation(value: BigInt) {
    this.set("liquidation", Value.fromBigInt(value));
  }

  get timestamp(): i32 {
    let value = this.get("timestamp");
    if (!value || value.kind == ValueKind.NULL) {
      return 0;
    } else {
      return value.toI32();
    }
  }

  set timestamp(value: i32) {
    this.set("timestamp", Value.fromI32(value));
  }
}

export class ChainlinkPrice extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save ChainlinkPrice entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type ChainlinkPrice must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`,
      );
      store.set("ChainlinkPrice", id.toString(), this);
    }
  }

  static loadInBlock(id: string): ChainlinkPrice | null {
    return changetype<ChainlinkPrice | null>(
      store.get_in_block("ChainlinkPrice", id),
    );
  }

  static load(id: string): ChainlinkPrice | null {
    return changetype<ChainlinkPrice | null>(store.get("ChainlinkPrice", id));
  }

  get id(): string {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get token(): string {
    let value = this.get("token");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set token(value: string) {
    this.set("token", Value.fromString(value));
  }

  get value(): BigInt {
    let value = this.get("value");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set value(value: BigInt) {
    this.set("value", Value.fromBigInt(value));
  }

  get timestamp(): i32 {
    let value = this.get("timestamp");
    if (!value || value.kind == ValueKind.NULL) {
      return 0;
    } else {
      return value.toI32();
    }
  }

  set timestamp(value: i32) {
    this.set("timestamp", Value.fromI32(value));
  }

  get period(): string {
    let value = this.get("period");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set period(value: string) {
    this.set("period", Value.fromString(value));
  }
}

export class HourlyPoolStat extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save HourlyPoolStat entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type HourlyPoolStat must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`,
      );
      store.set("HourlyPoolStat", id.toString(), this);
    }
  }

  static loadInBlock(id: string): HourlyPoolStat | null {
    return changetype<HourlyPoolStat | null>(
      store.get_in_block("HourlyPoolStat", id),
    );
  }

  static load(id: string): HourlyPoolStat | null {
    return changetype<HourlyPoolStat | null>(store.get("HourlyPoolStat", id));
  }

  get id(): string {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get usdgSupply(): BigInt {
    let value = this.get("usdgSupply");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set usdgSupply(value: BigInt) {
    this.set("usdgSupply", Value.fromBigInt(value));
  }

  get BTC(): BigInt {
    let value = this.get("BTC");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set BTC(value: BigInt) {
    this.set("BTC", Value.fromBigInt(value));
  }

  get ETH(): BigInt {
    let value = this.get("ETH");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set ETH(value: BigInt) {
    this.set("ETH", Value.fromBigInt(value));
  }

  get BNB(): BigInt {
    let value = this.get("BNB");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set BNB(value: BigInt) {
    this.set("BNB", Value.fromBigInt(value));
  }

  get BUSD(): BigInt {
    let value = this.get("BUSD");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set BUSD(value: BigInt) {
    this.set("BUSD", Value.fromBigInt(value));
  }

  get USDT(): BigInt {
    let value = this.get("USDT");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set USDT(value: BigInt) {
    this.set("USDT", Value.fromBigInt(value));
  }

  get USDC(): BigInt {
    let value = this.get("USDC");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set USDC(value: BigInt) {
    this.set("USDC", Value.fromBigInt(value));
  }
}

export class PoolStat extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save PoolStat entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type PoolStat must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`,
      );
      store.set("PoolStat", id.toString(), this);
    }
  }

  static loadInBlock(id: string): PoolStat | null {
    return changetype<PoolStat | null>(store.get_in_block("PoolStat", id));
  }

  static load(id: string): PoolStat | null {
    return changetype<PoolStat | null>(store.get("PoolStat", id));
  }

  get id(): string {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get usdgSupply(): BigInt {
    let value = this.get("usdgSupply");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set usdgSupply(value: BigInt) {
    this.set("usdgSupply", Value.fromBigInt(value));
  }

  get BTC_amount(): BigInt {
    let value = this.get("BTC_amount");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set BTC_amount(value: BigInt) {
    this.set("BTC_amount", Value.fromBigInt(value));
  }

  get ETH_amount(): BigInt {
    let value = this.get("ETH_amount");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set ETH_amount(value: BigInt) {
    this.set("ETH_amount", Value.fromBigInt(value));
  }

  get BNB_amount(): BigInt {
    let value = this.get("BNB_amount");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set BNB_amount(value: BigInt) {
    this.set("BNB_amount", Value.fromBigInt(value));
  }

  get BUSD_amount(): BigInt {
    let value = this.get("BUSD_amount");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set BUSD_amount(value: BigInt) {
    this.set("BUSD_amount", Value.fromBigInt(value));
  }

  get USDT_amount(): BigInt {
    let value = this.get("USDT_amount");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set USDT_amount(value: BigInt) {
    this.set("USDT_amount", Value.fromBigInt(value));
  }

  get USDC_amount(): BigInt {
    let value = this.get("USDC_amount");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set USDC_amount(value: BigInt) {
    this.set("USDC_amount", Value.fromBigInt(value));
  }

  get BTC_usd(): BigInt {
    let value = this.get("BTC_usd");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set BTC_usd(value: BigInt) {
    this.set("BTC_usd", Value.fromBigInt(value));
  }

  get ETH_usd(): BigInt {
    let value = this.get("ETH_usd");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set ETH_usd(value: BigInt) {
    this.set("ETH_usd", Value.fromBigInt(value));
  }

  get BNB_usd(): BigInt {
    let value = this.get("BNB_usd");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set BNB_usd(value: BigInt) {
    this.set("BNB_usd", Value.fromBigInt(value));
  }

  get BUSD_usd(): BigInt {
    let value = this.get("BUSD_usd");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set BUSD_usd(value: BigInt) {
    this.set("BUSD_usd", Value.fromBigInt(value));
  }

  get USDT_usd(): BigInt {
    let value = this.get("USDT_usd");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set USDT_usd(value: BigInt) {
    this.set("USDT_usd", Value.fromBigInt(value));
  }

  get USDC_usd(): BigInt {
    let value = this.get("USDC_usd");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set USDC_usd(value: BigInt) {
    this.set("USDC_usd", Value.fromBigInt(value));
  }

  get period(): string {
    let value = this.get("period");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set period(value: string) {
    this.set("period", Value.fromString(value));
  }
}

export class FeeStat extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save FeeStat entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type FeeStat must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`,
      );
      store.set("FeeStat", id.toString(), this);
    }
  }

  static loadInBlock(id: string): FeeStat | null {
    return changetype<FeeStat | null>(store.get_in_block("FeeStat", id));
  }

  static load(id: string): FeeStat | null {
    return changetype<FeeStat | null>(store.get("FeeStat", id));
  }

  get id(): string {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get marginAndLiquidation(): BigInt {
    let value = this.get("marginAndLiquidation");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set marginAndLiquidation(value: BigInt) {
    this.set("marginAndLiquidation", Value.fromBigInt(value));
  }

  get margin(): BigInt {
    let value = this.get("margin");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set margin(value: BigInt) {
    this.set("margin", Value.fromBigInt(value));
  }

  get liquidation(): BigInt {
    let value = this.get("liquidation");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set liquidation(value: BigInt) {
    this.set("liquidation", Value.fromBigInt(value));
  }

  get swap(): BigInt {
    let value = this.get("swap");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set swap(value: BigInt) {
    this.set("swap", Value.fromBigInt(value));
  }

  get mint(): BigInt {
    let value = this.get("mint");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set mint(value: BigInt) {
    this.set("mint", Value.fromBigInt(value));
  }

  get burn(): BigInt {
    let value = this.get("burn");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set burn(value: BigInt) {
    this.set("burn", Value.fromBigInt(value));
  }

  get marginAndLiquidationCumulative(): BigInt {
    let value = this.get("marginAndLiquidationCumulative");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set marginAndLiquidationCumulative(value: BigInt) {
    this.set("marginAndLiquidationCumulative", Value.fromBigInt(value));
  }

  get marginCumulative(): BigInt {
    let value = this.get("marginCumulative");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set marginCumulative(value: BigInt) {
    this.set("marginCumulative", Value.fromBigInt(value));
  }

  get liquidationCumulative(): BigInt {
    let value = this.get("liquidationCumulative");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set liquidationCumulative(value: BigInt) {
    this.set("liquidationCumulative", Value.fromBigInt(value));
  }

  get swapCumulative(): BigInt {
    let value = this.get("swapCumulative");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set swapCumulative(value: BigInt) {
    this.set("swapCumulative", Value.fromBigInt(value));
  }

  get mintCumulative(): BigInt {
    let value = this.get("mintCumulative");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set mintCumulative(value: BigInt) {
    this.set("mintCumulative", Value.fromBigInt(value));
  }

  get burnCumulative(): BigInt {
    let value = this.get("burnCumulative");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set burnCumulative(value: BigInt) {
    this.set("burnCumulative", Value.fromBigInt(value));
  }

  get period(): string {
    let value = this.get("period");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set period(value: string) {
    this.set("period", Value.fromString(value));
  }
}

export class VolumeStat extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save VolumeStat entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type VolumeStat must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`,
      );
      store.set("VolumeStat", id.toString(), this);
    }
  }

  static loadInBlock(id: string): VolumeStat | null {
    return changetype<VolumeStat | null>(store.get_in_block("VolumeStat", id));
  }

  static load(id: string): VolumeStat | null {
    return changetype<VolumeStat | null>(store.get("VolumeStat", id));
  }

  get id(): string {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get margin(): BigInt {
    let value = this.get("margin");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set margin(value: BigInt) {
    this.set("margin", Value.fromBigInt(value));
  }

  get swap(): BigInt {
    let value = this.get("swap");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set swap(value: BigInt) {
    this.set("swap", Value.fromBigInt(value));
  }

  get liquidation(): BigInt {
    let value = this.get("liquidation");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set liquidation(value: BigInt) {
    this.set("liquidation", Value.fromBigInt(value));
  }

  get mint(): BigInt {
    let value = this.get("mint");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set mint(value: BigInt) {
    this.set("mint", Value.fromBigInt(value));
  }

  get burn(): BigInt {
    let value = this.get("burn");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set burn(value: BigInt) {
    this.set("burn", Value.fromBigInt(value));
  }

  get marginCumulative(): BigInt {
    let value = this.get("marginCumulative");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set marginCumulative(value: BigInt) {
    this.set("marginCumulative", Value.fromBigInt(value));
  }

  get swapCumulative(): BigInt {
    let value = this.get("swapCumulative");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set swapCumulative(value: BigInt) {
    this.set("swapCumulative", Value.fromBigInt(value));
  }

  get liquidationCumulative(): BigInt {
    let value = this.get("liquidationCumulative");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set liquidationCumulative(value: BigInt) {
    this.set("liquidationCumulative", Value.fromBigInt(value));
  }

  get mintCumulative(): BigInt {
    let value = this.get("mintCumulative");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set mintCumulative(value: BigInt) {
    this.set("mintCumulative", Value.fromBigInt(value));
  }

  get burnCumulative(): BigInt {
    let value = this.get("burnCumulative");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set burnCumulative(value: BigInt) {
    this.set("burnCumulative", Value.fromBigInt(value));
  }

  get period(): string {
    let value = this.get("period");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set period(value: string) {
    this.set("period", Value.fromString(value));
  }
}
