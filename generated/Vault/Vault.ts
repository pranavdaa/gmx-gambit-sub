// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt,
} from "@graphprotocol/graph-ts";

export class BuyUSDG extends ethereum.Event {
  get params(): BuyUSDG__Params {
    return new BuyUSDG__Params(this);
  }
}

export class BuyUSDG__Params {
  _event: BuyUSDG;

  constructor(event: BuyUSDG) {
    this._event = event;
  }

  get account(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get token(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get tokenAmount(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get usdgAmount(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }
}

export class ClosePosition extends ethereum.Event {
  get params(): ClosePosition__Params {
    return new ClosePosition__Params(this);
  }
}

export class ClosePosition__Params {
  _event: ClosePosition;

  constructor(event: ClosePosition) {
    this._event = event;
  }

  get key(): Bytes {
    return this._event.parameters[0].value.toBytes();
  }

  get size(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get collateral(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get averagePrice(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }

  get entryFundingRate(): BigInt {
    return this._event.parameters[4].value.toBigInt();
  }

  get reserveAmount(): BigInt {
    return this._event.parameters[5].value.toBigInt();
  }

  get realisedPnl(): BigInt {
    return this._event.parameters[6].value.toBigInt();
  }
}

export class CollectMarginFees extends ethereum.Event {
  get params(): CollectMarginFees__Params {
    return new CollectMarginFees__Params(this);
  }
}

export class CollectMarginFees__Params {
  _event: CollectMarginFees;

  constructor(event: CollectMarginFees) {
    this._event = event;
  }

  get token(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get feeUsd(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get feeTokens(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class CollectSwapFees extends ethereum.Event {
  get params(): CollectSwapFees__Params {
    return new CollectSwapFees__Params(this);
  }
}

export class CollectSwapFees__Params {
  _event: CollectSwapFees;

  constructor(event: CollectSwapFees) {
    this._event = event;
  }

  get token(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get feeAmount(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class DecreaseGuaranteedUsd extends ethereum.Event {
  get params(): DecreaseGuaranteedUsd__Params {
    return new DecreaseGuaranteedUsd__Params(this);
  }
}

export class DecreaseGuaranteedUsd__Params {
  _event: DecreaseGuaranteedUsd;

  constructor(event: DecreaseGuaranteedUsd) {
    this._event = event;
  }

  get token(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get amount(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class DecreasePoolAmount extends ethereum.Event {
  get params(): DecreasePoolAmount__Params {
    return new DecreasePoolAmount__Params(this);
  }
}

export class DecreasePoolAmount__Params {
  _event: DecreasePoolAmount;

  constructor(event: DecreasePoolAmount) {
    this._event = event;
  }

  get token(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get amount(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class DecreasePosition extends ethereum.Event {
  get params(): DecreasePosition__Params {
    return new DecreasePosition__Params(this);
  }
}

export class DecreasePosition__Params {
  _event: DecreasePosition;

  constructor(event: DecreasePosition) {
    this._event = event;
  }

  get key(): Bytes {
    return this._event.parameters[0].value.toBytes();
  }

  get account(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get collateralToken(): Address {
    return this._event.parameters[2].value.toAddress();
  }

  get indexToken(): Address {
    return this._event.parameters[3].value.toAddress();
  }

  get collateralDelta(): BigInt {
    return this._event.parameters[4].value.toBigInt();
  }

  get sizeDelta(): BigInt {
    return this._event.parameters[5].value.toBigInt();
  }

  get isLong(): boolean {
    return this._event.parameters[6].value.toBoolean();
  }

  get price(): BigInt {
    return this._event.parameters[7].value.toBigInt();
  }
}

export class DecreaseReservedAmount extends ethereum.Event {
  get params(): DecreaseReservedAmount__Params {
    return new DecreaseReservedAmount__Params(this);
  }
}

export class DecreaseReservedAmount__Params {
  _event: DecreaseReservedAmount;

  constructor(event: DecreaseReservedAmount) {
    this._event = event;
  }

  get token(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get amount(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class DecreaseUsdgAmount extends ethereum.Event {
  get params(): DecreaseUsdgAmount__Params {
    return new DecreaseUsdgAmount__Params(this);
  }
}

export class DecreaseUsdgAmount__Params {
  _event: DecreaseUsdgAmount;

  constructor(event: DecreaseUsdgAmount) {
    this._event = event;
  }

  get token(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get amount(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class DirectPoolDeposit extends ethereum.Event {
  get params(): DirectPoolDeposit__Params {
    return new DirectPoolDeposit__Params(this);
  }
}

export class DirectPoolDeposit__Params {
  _event: DirectPoolDeposit;

  constructor(event: DirectPoolDeposit) {
    this._event = event;
  }

  get token(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get amount(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class IncreaseGuaranteedUsd extends ethereum.Event {
  get params(): IncreaseGuaranteedUsd__Params {
    return new IncreaseGuaranteedUsd__Params(this);
  }
}

export class IncreaseGuaranteedUsd__Params {
  _event: IncreaseGuaranteedUsd;

  constructor(event: IncreaseGuaranteedUsd) {
    this._event = event;
  }

  get token(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get amount(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class IncreasePoolAmount extends ethereum.Event {
  get params(): IncreasePoolAmount__Params {
    return new IncreasePoolAmount__Params(this);
  }
}

export class IncreasePoolAmount__Params {
  _event: IncreasePoolAmount;

  constructor(event: IncreasePoolAmount) {
    this._event = event;
  }

  get token(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get amount(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class IncreasePosition extends ethereum.Event {
  get params(): IncreasePosition__Params {
    return new IncreasePosition__Params(this);
  }
}

export class IncreasePosition__Params {
  _event: IncreasePosition;

  constructor(event: IncreasePosition) {
    this._event = event;
  }

  get key(): Bytes {
    return this._event.parameters[0].value.toBytes();
  }

  get account(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get collateralToken(): Address {
    return this._event.parameters[2].value.toAddress();
  }

  get indexToken(): Address {
    return this._event.parameters[3].value.toAddress();
  }

  get collateralDelta(): BigInt {
    return this._event.parameters[4].value.toBigInt();
  }

  get sizeDelta(): BigInt {
    return this._event.parameters[5].value.toBigInt();
  }

  get isLong(): boolean {
    return this._event.parameters[6].value.toBoolean();
  }

  get price(): BigInt {
    return this._event.parameters[7].value.toBigInt();
  }
}

export class IncreaseReservedAmount extends ethereum.Event {
  get params(): IncreaseReservedAmount__Params {
    return new IncreaseReservedAmount__Params(this);
  }
}

export class IncreaseReservedAmount__Params {
  _event: IncreaseReservedAmount;

  constructor(event: IncreaseReservedAmount) {
    this._event = event;
  }

  get token(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get amount(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class IncreaseUsdgAmount extends ethereum.Event {
  get params(): IncreaseUsdgAmount__Params {
    return new IncreaseUsdgAmount__Params(this);
  }
}

export class IncreaseUsdgAmount__Params {
  _event: IncreaseUsdgAmount;

  constructor(event: IncreaseUsdgAmount) {
    this._event = event;
  }

  get token(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get amount(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class LiquidatePosition extends ethereum.Event {
  get params(): LiquidatePosition__Params {
    return new LiquidatePosition__Params(this);
  }
}

export class LiquidatePosition__Params {
  _event: LiquidatePosition;

  constructor(event: LiquidatePosition) {
    this._event = event;
  }

  get key(): Bytes {
    return this._event.parameters[0].value.toBytes();
  }

  get account(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get collateralToken(): Address {
    return this._event.parameters[2].value.toAddress();
  }

  get indexToken(): Address {
    return this._event.parameters[3].value.toAddress();
  }

  get isLong(): boolean {
    return this._event.parameters[4].value.toBoolean();
  }

  get size(): BigInt {
    return this._event.parameters[5].value.toBigInt();
  }

  get collateral(): BigInt {
    return this._event.parameters[6].value.toBigInt();
  }

  get reserveAmount(): BigInt {
    return this._event.parameters[7].value.toBigInt();
  }

  get realisedPnl(): BigInt {
    return this._event.parameters[8].value.toBigInt();
  }

  get markPrice(): BigInt {
    return this._event.parameters[9].value.toBigInt();
  }
}

export class SellUSDG extends ethereum.Event {
  get params(): SellUSDG__Params {
    return new SellUSDG__Params(this);
  }
}

export class SellUSDG__Params {
  _event: SellUSDG;

  constructor(event: SellUSDG) {
    this._event = event;
  }

  get account(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get token(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get usdgAmount(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get tokenAmount(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }
}

export class Swap extends ethereum.Event {
  get params(): Swap__Params {
    return new Swap__Params(this);
  }
}

export class Swap__Params {
  _event: Swap;

  constructor(event: Swap) {
    this._event = event;
  }

  get account(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get tokenIn(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get tokenOut(): Address {
    return this._event.parameters[2].value.toAddress();
  }

  get amountIn(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }

  get amountOut(): BigInt {
    return this._event.parameters[4].value.toBigInt();
  }
}

export class UpdateFundingRate extends ethereum.Event {
  get params(): UpdateFundingRate__Params {
    return new UpdateFundingRate__Params(this);
  }
}

export class UpdateFundingRate__Params {
  _event: UpdateFundingRate;

  constructor(event: UpdateFundingRate) {
    this._event = event;
  }

  get token(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get fundingRate(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class UpdatePnl extends ethereum.Event {
  get params(): UpdatePnl__Params {
    return new UpdatePnl__Params(this);
  }
}

export class UpdatePnl__Params {
  _event: UpdatePnl;

  constructor(event: UpdatePnl) {
    this._event = event;
  }

  get key(): Bytes {
    return this._event.parameters[0].value.toBytes();
  }

  get hasProfit(): boolean {
    return this._event.parameters[1].value.toBoolean();
  }

  get delta(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class UpdatePosition extends ethereum.Event {
  get params(): UpdatePosition__Params {
    return new UpdatePosition__Params(this);
  }
}

export class UpdatePosition__Params {
  _event: UpdatePosition;

  constructor(event: UpdatePosition) {
    this._event = event;
  }

  get key(): Bytes {
    return this._event.parameters[0].value.toBytes();
  }

  get size(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get collateral(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get averagePrice(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }

  get entryFundingRate(): BigInt {
    return this._event.parameters[4].value.toBigInt();
  }

  get reserveAmount(): BigInt {
    return this._event.parameters[5].value.toBigInt();
  }

  get realisedPnl(): BigInt {
    return this._event.parameters[6].value.toBigInt();
  }
}

export class Vault__getDeltaResult {
  value0: boolean;
  value1: BigInt;

  constructor(value0: boolean, value1: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromBoolean(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    return map;
  }

  getValue0(): boolean {
    return this.value0;
  }

  getValue1(): BigInt {
    return this.value1;
  }
}

export class Vault__getPositionResult {
  value0: BigInt;
  value1: BigInt;
  value2: BigInt;
  value3: BigInt;
  value4: BigInt;
  value5: BigInt;
  value6: boolean;

  constructor(
    value0: BigInt,
    value1: BigInt,
    value2: BigInt,
    value3: BigInt,
    value4: BigInt,
    value5: BigInt,
    value6: boolean,
  ) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
    this.value3 = value3;
    this.value4 = value4;
    this.value5 = value5;
    this.value6 = value6;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    map.set("value2", ethereum.Value.fromUnsignedBigInt(this.value2));
    map.set("value3", ethereum.Value.fromUnsignedBigInt(this.value3));
    map.set("value4", ethereum.Value.fromUnsignedBigInt(this.value4));
    map.set("value5", ethereum.Value.fromUnsignedBigInt(this.value5));
    map.set("value6", ethereum.Value.fromBoolean(this.value6));
    return map;
  }

  getValue0(): BigInt {
    return this.value0;
  }

  getValue1(): BigInt {
    return this.value1;
  }

  getValue2(): BigInt {
    return this.value2;
  }

  getValue3(): BigInt {
    return this.value3;
  }

  getValue4(): BigInt {
    return this.value4;
  }

  getValue5(): BigInt {
    return this.value5;
  }

  getValue6(): boolean {
    return this.value6;
  }
}

export class Vault__getPositionDeltaResult {
  value0: boolean;
  value1: BigInt;

  constructor(value0: boolean, value1: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromBoolean(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    return map;
  }

  getValue0(): boolean {
    return this.value0;
  }

  getValue1(): BigInt {
    return this.value1;
  }
}

export class Vault__positionsResult {
  value0: BigInt;
  value1: BigInt;
  value2: BigInt;
  value3: BigInt;
  value4: BigInt;
  value5: BigInt;

  constructor(
    value0: BigInt,
    value1: BigInt,
    value2: BigInt,
    value3: BigInt,
    value4: BigInt,
    value5: BigInt,
  ) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
    this.value3 = value3;
    this.value4 = value4;
    this.value5 = value5;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    map.set("value2", ethereum.Value.fromUnsignedBigInt(this.value2));
    map.set("value3", ethereum.Value.fromUnsignedBigInt(this.value3));
    map.set("value4", ethereum.Value.fromUnsignedBigInt(this.value4));
    map.set("value5", ethereum.Value.fromSignedBigInt(this.value5));
    return map;
  }

  getSize(): BigInt {
    return this.value0;
  }

  getCollateral(): BigInt {
    return this.value1;
  }

  getAveragePrice(): BigInt {
    return this.value2;
  }

  getEntryFundingRate(): BigInt {
    return this.value3;
  }

  getReserveAmount(): BigInt {
    return this.value4;
  }

  getRealisedPnl(): BigInt {
    return this.value5;
  }
}

export class Vault__validateLiquidationResult {
  value0: boolean;
  value1: BigInt;

  constructor(value0: boolean, value1: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromBoolean(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    return map;
  }

  getValue0(): boolean {
    return this.value0;
  }

  getValue1(): BigInt {
    return this.value1;
  }
}

export class Vault extends ethereum.SmartContract {
  static bind(address: Address): Vault {
    return new Vault("Vault", address);
  }

  BASIS_POINTS_DIVISOR(): BigInt {
    let result = super.call(
      "BASIS_POINTS_DIVISOR",
      "BASIS_POINTS_DIVISOR():(uint256)",
      [],
    );

    return result[0].toBigInt();
  }

  try_BASIS_POINTS_DIVISOR(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "BASIS_POINTS_DIVISOR",
      "BASIS_POINTS_DIVISOR():(uint256)",
      [],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  FUNDING_RATE_PRECISION(): BigInt {
    let result = super.call(
      "FUNDING_RATE_PRECISION",
      "FUNDING_RATE_PRECISION():(uint256)",
      [],
    );

    return result[0].toBigInt();
  }

  try_FUNDING_RATE_PRECISION(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "FUNDING_RATE_PRECISION",
      "FUNDING_RATE_PRECISION():(uint256)",
      [],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  MAX_FEE_BASIS_POINTS(): BigInt {
    let result = super.call(
      "MAX_FEE_BASIS_POINTS",
      "MAX_FEE_BASIS_POINTS():(uint256)",
      [],
    );

    return result[0].toBigInt();
  }

  try_MAX_FEE_BASIS_POINTS(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "MAX_FEE_BASIS_POINTS",
      "MAX_FEE_BASIS_POINTS():(uint256)",
      [],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  MAX_FUNDING_RATE_FACTOR(): BigInt {
    let result = super.call(
      "MAX_FUNDING_RATE_FACTOR",
      "MAX_FUNDING_RATE_FACTOR():(uint256)",
      [],
    );

    return result[0].toBigInt();
  }

  try_MAX_FUNDING_RATE_FACTOR(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "MAX_FUNDING_RATE_FACTOR",
      "MAX_FUNDING_RATE_FACTOR():(uint256)",
      [],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  MAX_LIQUIDATION_FEE_USD(): BigInt {
    let result = super.call(
      "MAX_LIQUIDATION_FEE_USD",
      "MAX_LIQUIDATION_FEE_USD():(uint256)",
      [],
    );

    return result[0].toBigInt();
  }

  try_MAX_LIQUIDATION_FEE_USD(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "MAX_LIQUIDATION_FEE_USD",
      "MAX_LIQUIDATION_FEE_USD():(uint256)",
      [],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  MIN_FUNDING_RATE_INTERVAL(): BigInt {
    let result = super.call(
      "MIN_FUNDING_RATE_INTERVAL",
      "MIN_FUNDING_RATE_INTERVAL():(uint256)",
      [],
    );

    return result[0].toBigInt();
  }

  try_MIN_FUNDING_RATE_INTERVAL(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "MIN_FUNDING_RATE_INTERVAL",
      "MIN_FUNDING_RATE_INTERVAL():(uint256)",
      [],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  MIN_LEVERAGE(): BigInt {
    let result = super.call("MIN_LEVERAGE", "MIN_LEVERAGE():(uint256)", []);

    return result[0].toBigInt();
  }

  try_MIN_LEVERAGE(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("MIN_LEVERAGE", "MIN_LEVERAGE():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  PRICE_PRECISION(): BigInt {
    let result = super.call(
      "PRICE_PRECISION",
      "PRICE_PRECISION():(uint256)",
      [],
    );

    return result[0].toBigInt();
  }

  try_PRICE_PRECISION(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "PRICE_PRECISION",
      "PRICE_PRECISION():(uint256)",
      [],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  USDG_DECIMALS(): BigInt {
    let result = super.call("USDG_DECIMALS", "USDG_DECIMALS():(uint256)", []);

    return result[0].toBigInt();
  }

  try_USDG_DECIMALS(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "USDG_DECIMALS",
      "USDG_DECIMALS():(uint256)",
      [],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  adjustForDecimals(
    _amount: BigInt,
    _tokenDiv: Address,
    _tokenMul: Address,
  ): BigInt {
    let result = super.call(
      "adjustForDecimals",
      "adjustForDecimals(uint256,address,address):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(_amount),
        ethereum.Value.fromAddress(_tokenDiv),
        ethereum.Value.fromAddress(_tokenMul),
      ],
    );

    return result[0].toBigInt();
  }

  try_adjustForDecimals(
    _amount: BigInt,
    _tokenDiv: Address,
    _tokenMul: Address,
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "adjustForDecimals",
      "adjustForDecimals(uint256,address,address):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(_amount),
        ethereum.Value.fromAddress(_tokenDiv),
        ethereum.Value.fromAddress(_tokenMul),
      ],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  approvedRouters(param0: Address, param1: Address): boolean {
    let result = super.call(
      "approvedRouters",
      "approvedRouters(address,address):(bool)",
      [ethereum.Value.fromAddress(param0), ethereum.Value.fromAddress(param1)],
    );

    return result[0].toBoolean();
  }

  try_approvedRouters(
    param0: Address,
    param1: Address,
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "approvedRouters",
      "approvedRouters(address,address):(bool)",
      [ethereum.Value.fromAddress(param0), ethereum.Value.fromAddress(param1)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  availableReserve(_token: Address): BigInt {
    let result = super.call(
      "availableReserve",
      "availableReserve(address):(uint256)",
      [ethereum.Value.fromAddress(_token)],
    );

    return result[0].toBigInt();
  }

  try_availableReserve(_token: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "availableReserve",
      "availableReserve(address):(uint256)",
      [ethereum.Value.fromAddress(_token)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  buyUSDG(_token: Address, _receiver: Address): BigInt {
    let result = super.call("buyUSDG", "buyUSDG(address,address):(uint256)", [
      ethereum.Value.fromAddress(_token),
      ethereum.Value.fromAddress(_receiver),
    ]);

    return result[0].toBigInt();
  }

  try_buyUSDG(
    _token: Address,
    _receiver: Address,
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "buyUSDG",
      "buyUSDG(address,address):(uint256)",
      [
        ethereum.Value.fromAddress(_token),
        ethereum.Value.fromAddress(_receiver),
      ],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  cumulativeFundingRates(param0: Address): BigInt {
    let result = super.call(
      "cumulativeFundingRates",
      "cumulativeFundingRates(address):(uint256)",
      [ethereum.Value.fromAddress(param0)],
    );

    return result[0].toBigInt();
  }

  try_cumulativeFundingRates(param0: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "cumulativeFundingRates",
      "cumulativeFundingRates(address):(uint256)",
      [ethereum.Value.fromAddress(param0)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  decreasePosition(
    _account: Address,
    _collateralToken: Address,
    _indexToken: Address,
    _collateralDelta: BigInt,
    _sizeDelta: BigInt,
    _isLong: boolean,
    _receiver: Address,
  ): BigInt {
    let result = super.call(
      "decreasePosition",
      "decreasePosition(address,address,address,uint256,uint256,bool,address):(uint256)",
      [
        ethereum.Value.fromAddress(_account),
        ethereum.Value.fromAddress(_collateralToken),
        ethereum.Value.fromAddress(_indexToken),
        ethereum.Value.fromUnsignedBigInt(_collateralDelta),
        ethereum.Value.fromUnsignedBigInt(_sizeDelta),
        ethereum.Value.fromBoolean(_isLong),
        ethereum.Value.fromAddress(_receiver),
      ],
    );

    return result[0].toBigInt();
  }

  try_decreasePosition(
    _account: Address,
    _collateralToken: Address,
    _indexToken: Address,
    _collateralDelta: BigInt,
    _sizeDelta: BigInt,
    _isLong: boolean,
    _receiver: Address,
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "decreasePosition",
      "decreasePosition(address,address,address,uint256,uint256,bool,address):(uint256)",
      [
        ethereum.Value.fromAddress(_account),
        ethereum.Value.fromAddress(_collateralToken),
        ethereum.Value.fromAddress(_indexToken),
        ethereum.Value.fromUnsignedBigInt(_collateralDelta),
        ethereum.Value.fromUnsignedBigInt(_sizeDelta),
        ethereum.Value.fromBoolean(_isLong),
        ethereum.Value.fromAddress(_receiver),
      ],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  feeReserves(param0: Address): BigInt {
    let result = super.call("feeReserves", "feeReserves(address):(uint256)", [
      ethereum.Value.fromAddress(param0),
    ]);

    return result[0].toBigInt();
  }

  try_feeReserves(param0: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "feeReserves",
      "feeReserves(address):(uint256)",
      [ethereum.Value.fromAddress(param0)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  fundingInterval(): BigInt {
    let result = super.call(
      "fundingInterval",
      "fundingInterval():(uint256)",
      [],
    );

    return result[0].toBigInt();
  }

  try_fundingInterval(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "fundingInterval",
      "fundingInterval():(uint256)",
      [],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  fundingRateFactor(): BigInt {
    let result = super.call(
      "fundingRateFactor",
      "fundingRateFactor():(uint256)",
      [],
    );

    return result[0].toBigInt();
  }

  try_fundingRateFactor(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "fundingRateFactor",
      "fundingRateFactor():(uint256)",
      [],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getDelta(
    _indexToken: Address,
    _size: BigInt,
    _averagePrice: BigInt,
    _isLong: boolean,
  ): Vault__getDeltaResult {
    let result = super.call(
      "getDelta",
      "getDelta(address,uint256,uint256,bool):(bool,uint256)",
      [
        ethereum.Value.fromAddress(_indexToken),
        ethereum.Value.fromUnsignedBigInt(_size),
        ethereum.Value.fromUnsignedBigInt(_averagePrice),
        ethereum.Value.fromBoolean(_isLong),
      ],
    );

    return new Vault__getDeltaResult(
      result[0].toBoolean(),
      result[1].toBigInt(),
    );
  }

  try_getDelta(
    _indexToken: Address,
    _size: BigInt,
    _averagePrice: BigInt,
    _isLong: boolean,
  ): ethereum.CallResult<Vault__getDeltaResult> {
    let result = super.tryCall(
      "getDelta",
      "getDelta(address,uint256,uint256,bool):(bool,uint256)",
      [
        ethereum.Value.fromAddress(_indexToken),
        ethereum.Value.fromUnsignedBigInt(_size),
        ethereum.Value.fromUnsignedBigInt(_averagePrice),
        ethereum.Value.fromBoolean(_isLong),
      ],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new Vault__getDeltaResult(value[0].toBoolean(), value[1].toBigInt()),
    );
  }

  getFundingFee(
    _token: Address,
    _size: BigInt,
    _entryFundingRate: BigInt,
  ): BigInt {
    let result = super.call(
      "getFundingFee",
      "getFundingFee(address,uint256,uint256):(uint256)",
      [
        ethereum.Value.fromAddress(_token),
        ethereum.Value.fromUnsignedBigInt(_size),
        ethereum.Value.fromUnsignedBigInt(_entryFundingRate),
      ],
    );

    return result[0].toBigInt();
  }

  try_getFundingFee(
    _token: Address,
    _size: BigInt,
    _entryFundingRate: BigInt,
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getFundingFee",
      "getFundingFee(address,uint256,uint256):(uint256)",
      [
        ethereum.Value.fromAddress(_token),
        ethereum.Value.fromUnsignedBigInt(_size),
        ethereum.Value.fromUnsignedBigInt(_entryFundingRate),
      ],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getMaxPrice(_token: Address): BigInt {
    let result = super.call("getMaxPrice", "getMaxPrice(address):(uint256)", [
      ethereum.Value.fromAddress(_token),
    ]);

    return result[0].toBigInt();
  }

  try_getMaxPrice(_token: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getMaxPrice",
      "getMaxPrice(address):(uint256)",
      [ethereum.Value.fromAddress(_token)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getMaxUsdgAmount(): BigInt {
    let result = super.call(
      "getMaxUsdgAmount",
      "getMaxUsdgAmount():(uint256)",
      [],
    );

    return result[0].toBigInt();
  }

  try_getMaxUsdgAmount(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getMaxUsdgAmount",
      "getMaxUsdgAmount():(uint256)",
      [],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getMinPrice(_token: Address): BigInt {
    let result = super.call("getMinPrice", "getMinPrice(address):(uint256)", [
      ethereum.Value.fromAddress(_token),
    ]);

    return result[0].toBigInt();
  }

  try_getMinPrice(_token: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getMinPrice",
      "getMinPrice(address):(uint256)",
      [ethereum.Value.fromAddress(_token)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getNextAveragePrice(
    _indexToken: Address,
    _size: BigInt,
    _averagePrice: BigInt,
    _isLong: boolean,
    _nextPrice: BigInt,
    _sizeDelta: BigInt,
  ): BigInt {
    let result = super.call(
      "getNextAveragePrice",
      "getNextAveragePrice(address,uint256,uint256,bool,uint256,uint256):(uint256)",
      [
        ethereum.Value.fromAddress(_indexToken),
        ethereum.Value.fromUnsignedBigInt(_size),
        ethereum.Value.fromUnsignedBigInt(_averagePrice),
        ethereum.Value.fromBoolean(_isLong),
        ethereum.Value.fromUnsignedBigInt(_nextPrice),
        ethereum.Value.fromUnsignedBigInt(_sizeDelta),
      ],
    );

    return result[0].toBigInt();
  }

  try_getNextAveragePrice(
    _indexToken: Address,
    _size: BigInt,
    _averagePrice: BigInt,
    _isLong: boolean,
    _nextPrice: BigInt,
    _sizeDelta: BigInt,
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getNextAveragePrice",
      "getNextAveragePrice(address,uint256,uint256,bool,uint256,uint256):(uint256)",
      [
        ethereum.Value.fromAddress(_indexToken),
        ethereum.Value.fromUnsignedBigInt(_size),
        ethereum.Value.fromUnsignedBigInt(_averagePrice),
        ethereum.Value.fromBoolean(_isLong),
        ethereum.Value.fromUnsignedBigInt(_nextPrice),
        ethereum.Value.fromUnsignedBigInt(_sizeDelta),
      ],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getNextFundingRate(_token: Address): BigInt {
    let result = super.call(
      "getNextFundingRate",
      "getNextFundingRate(address):(uint256)",
      [ethereum.Value.fromAddress(_token)],
    );

    return result[0].toBigInt();
  }

  try_getNextFundingRate(_token: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getNextFundingRate",
      "getNextFundingRate(address):(uint256)",
      [ethereum.Value.fromAddress(_token)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getPosition(
    _account: Address,
    _collateralToken: Address,
    _indexToken: Address,
    _isLong: boolean,
  ): Vault__getPositionResult {
    let result = super.call(
      "getPosition",
      "getPosition(address,address,address,bool):(uint256,uint256,uint256,uint256,uint256,uint256,bool)",
      [
        ethereum.Value.fromAddress(_account),
        ethereum.Value.fromAddress(_collateralToken),
        ethereum.Value.fromAddress(_indexToken),
        ethereum.Value.fromBoolean(_isLong),
      ],
    );

    return new Vault__getPositionResult(
      result[0].toBigInt(),
      result[1].toBigInt(),
      result[2].toBigInt(),
      result[3].toBigInt(),
      result[4].toBigInt(),
      result[5].toBigInt(),
      result[6].toBoolean(),
    );
  }

  try_getPosition(
    _account: Address,
    _collateralToken: Address,
    _indexToken: Address,
    _isLong: boolean,
  ): ethereum.CallResult<Vault__getPositionResult> {
    let result = super.tryCall(
      "getPosition",
      "getPosition(address,address,address,bool):(uint256,uint256,uint256,uint256,uint256,uint256,bool)",
      [
        ethereum.Value.fromAddress(_account),
        ethereum.Value.fromAddress(_collateralToken),
        ethereum.Value.fromAddress(_indexToken),
        ethereum.Value.fromBoolean(_isLong),
      ],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new Vault__getPositionResult(
        value[0].toBigInt(),
        value[1].toBigInt(),
        value[2].toBigInt(),
        value[3].toBigInt(),
        value[4].toBigInt(),
        value[5].toBigInt(),
        value[6].toBoolean(),
      ),
    );
  }

  getPositionDelta(
    _account: Address,
    _collateralToken: Address,
    _indexToken: Address,
    _isLong: boolean,
  ): Vault__getPositionDeltaResult {
    let result = super.call(
      "getPositionDelta",
      "getPositionDelta(address,address,address,bool):(bool,uint256)",
      [
        ethereum.Value.fromAddress(_account),
        ethereum.Value.fromAddress(_collateralToken),
        ethereum.Value.fromAddress(_indexToken),
        ethereum.Value.fromBoolean(_isLong),
      ],
    );

    return new Vault__getPositionDeltaResult(
      result[0].toBoolean(),
      result[1].toBigInt(),
    );
  }

  try_getPositionDelta(
    _account: Address,
    _collateralToken: Address,
    _indexToken: Address,
    _isLong: boolean,
  ): ethereum.CallResult<Vault__getPositionDeltaResult> {
    let result = super.tryCall(
      "getPositionDelta",
      "getPositionDelta(address,address,address,bool):(bool,uint256)",
      [
        ethereum.Value.fromAddress(_account),
        ethereum.Value.fromAddress(_collateralToken),
        ethereum.Value.fromAddress(_indexToken),
        ethereum.Value.fromBoolean(_isLong),
      ],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new Vault__getPositionDeltaResult(
        value[0].toBoolean(),
        value[1].toBigInt(),
      ),
    );
  }

  getPositionFee(_sizeDelta: BigInt): BigInt {
    let result = super.call(
      "getPositionFee",
      "getPositionFee(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(_sizeDelta)],
    );

    return result[0].toBigInt();
  }

  try_getPositionFee(_sizeDelta: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getPositionFee",
      "getPositionFee(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(_sizeDelta)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getPositionKey(
    _account: Address,
    _collateralToken: Address,
    _indexToken: Address,
    _isLong: boolean,
  ): Bytes {
    let result = super.call(
      "getPositionKey",
      "getPositionKey(address,address,address,bool):(bytes32)",
      [
        ethereum.Value.fromAddress(_account),
        ethereum.Value.fromAddress(_collateralToken),
        ethereum.Value.fromAddress(_indexToken),
        ethereum.Value.fromBoolean(_isLong),
      ],
    );

    return result[0].toBytes();
  }

  try_getPositionKey(
    _account: Address,
    _collateralToken: Address,
    _indexToken: Address,
    _isLong: boolean,
  ): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "getPositionKey",
      "getPositionKey(address,address,address,bool):(bytes32)",
      [
        ethereum.Value.fromAddress(_account),
        ethereum.Value.fromAddress(_collateralToken),
        ethereum.Value.fromAddress(_indexToken),
        ethereum.Value.fromBoolean(_isLong),
      ],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  getPositionLeverage(
    _account: Address,
    _collateralToken: Address,
    _indexToken: Address,
    _isLong: boolean,
  ): BigInt {
    let result = super.call(
      "getPositionLeverage",
      "getPositionLeverage(address,address,address,bool):(uint256)",
      [
        ethereum.Value.fromAddress(_account),
        ethereum.Value.fromAddress(_collateralToken),
        ethereum.Value.fromAddress(_indexToken),
        ethereum.Value.fromBoolean(_isLong),
      ],
    );

    return result[0].toBigInt();
  }

  try_getPositionLeverage(
    _account: Address,
    _collateralToken: Address,
    _indexToken: Address,
    _isLong: boolean,
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getPositionLeverage",
      "getPositionLeverage(address,address,address,bool):(uint256)",
      [
        ethereum.Value.fromAddress(_account),
        ethereum.Value.fromAddress(_collateralToken),
        ethereum.Value.fromAddress(_indexToken),
        ethereum.Value.fromBoolean(_isLong),
      ],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getRedemptionAmount(_token: Address, _usdgAmount: BigInt): BigInt {
    let result = super.call(
      "getRedemptionAmount",
      "getRedemptionAmount(address,uint256):(uint256)",
      [
        ethereum.Value.fromAddress(_token),
        ethereum.Value.fromUnsignedBigInt(_usdgAmount),
      ],
    );

    return result[0].toBigInt();
  }

  try_getRedemptionAmount(
    _token: Address,
    _usdgAmount: BigInt,
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getRedemptionAmount",
      "getRedemptionAmount(address,uint256):(uint256)",
      [
        ethereum.Value.fromAddress(_token),
        ethereum.Value.fromUnsignedBigInt(_usdgAmount),
      ],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getRedemptionBasisPoints(_token: Address): BigInt {
    let result = super.call(
      "getRedemptionBasisPoints",
      "getRedemptionBasisPoints(address):(uint256)",
      [ethereum.Value.fromAddress(_token)],
    );

    return result[0].toBigInt();
  }

  try_getRedemptionBasisPoints(_token: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getRedemptionBasisPoints",
      "getRedemptionBasisPoints(address):(uint256)",
      [ethereum.Value.fromAddress(_token)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getRedemptionCollateral(_token: Address): BigInt {
    let result = super.call(
      "getRedemptionCollateral",
      "getRedemptionCollateral(address):(uint256)",
      [ethereum.Value.fromAddress(_token)],
    );

    return result[0].toBigInt();
  }

  try_getRedemptionCollateral(_token: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getRedemptionCollateral",
      "getRedemptionCollateral(address):(uint256)",
      [ethereum.Value.fromAddress(_token)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getRedemptionCollateralUsd(_token: Address): BigInt {
    let result = super.call(
      "getRedemptionCollateralUsd",
      "getRedemptionCollateralUsd(address):(uint256)",
      [ethereum.Value.fromAddress(_token)],
    );

    return result[0].toBigInt();
  }

  try_getRedemptionCollateralUsd(_token: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getRedemptionCollateralUsd",
      "getRedemptionCollateralUsd(address):(uint256)",
      [ethereum.Value.fromAddress(_token)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getUtilisation(_token: Address): BigInt {
    let result = super.call(
      "getUtilisation",
      "getUtilisation(address):(uint256)",
      [ethereum.Value.fromAddress(_token)],
    );

    return result[0].toBigInt();
  }

  try_getUtilisation(_token: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getUtilisation",
      "getUtilisation(address):(uint256)",
      [ethereum.Value.fromAddress(_token)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  gov(): Address {
    let result = super.call("gov", "gov():(address)", []);

    return result[0].toAddress();
  }

  try_gov(): ethereum.CallResult<Address> {
    let result = super.tryCall("gov", "gov():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  guaranteedUsd(param0: Address): BigInt {
    let result = super.call(
      "guaranteedUsd",
      "guaranteedUsd(address):(uint256)",
      [ethereum.Value.fromAddress(param0)],
    );

    return result[0].toBigInt();
  }

  try_guaranteedUsd(param0: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "guaranteedUsd",
      "guaranteedUsd(address):(uint256)",
      [ethereum.Value.fromAddress(param0)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  includeAmmPrice(): boolean {
    let result = super.call("includeAmmPrice", "includeAmmPrice():(bool)", []);

    return result[0].toBoolean();
  }

  try_includeAmmPrice(): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "includeAmmPrice",
      "includeAmmPrice():(bool)",
      [],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  isInitialized(): boolean {
    let result = super.call("isInitialized", "isInitialized():(bool)", []);

    return result[0].toBoolean();
  }

  try_isInitialized(): ethereum.CallResult<boolean> {
    let result = super.tryCall("isInitialized", "isInitialized():(bool)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  isMintingEnabled(): boolean {
    let result = super.call(
      "isMintingEnabled",
      "isMintingEnabled():(bool)",
      [],
    );

    return result[0].toBoolean();
  }

  try_isMintingEnabled(): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "isMintingEnabled",
      "isMintingEnabled():(bool)",
      [],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  isSwapEnabled(): boolean {
    let result = super.call("isSwapEnabled", "isSwapEnabled():(bool)", []);

    return result[0].toBoolean();
  }

  try_isSwapEnabled(): ethereum.CallResult<boolean> {
    let result = super.tryCall("isSwapEnabled", "isSwapEnabled():(bool)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  lastFundingTimes(param0: Address): BigInt {
    let result = super.call(
      "lastFundingTimes",
      "lastFundingTimes(address):(uint256)",
      [ethereum.Value.fromAddress(param0)],
    );

    return result[0].toBigInt();
  }

  try_lastFundingTimes(param0: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "lastFundingTimes",
      "lastFundingTimes(address):(uint256)",
      [ethereum.Value.fromAddress(param0)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  liquidationFeeUsd(): BigInt {
    let result = super.call(
      "liquidationFeeUsd",
      "liquidationFeeUsd():(uint256)",
      [],
    );

    return result[0].toBigInt();
  }

  try_liquidationFeeUsd(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "liquidationFeeUsd",
      "liquidationFeeUsd():(uint256)",
      [],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  marginFeeBasisPoints(): BigInt {
    let result = super.call(
      "marginFeeBasisPoints",
      "marginFeeBasisPoints():(uint256)",
      [],
    );

    return result[0].toBigInt();
  }

  try_marginFeeBasisPoints(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "marginFeeBasisPoints",
      "marginFeeBasisPoints():(uint256)",
      [],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  maxDebtBasisPoints(): BigInt {
    let result = super.call(
      "maxDebtBasisPoints",
      "maxDebtBasisPoints():(uint256)",
      [],
    );

    return result[0].toBigInt();
  }

  try_maxDebtBasisPoints(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "maxDebtBasisPoints",
      "maxDebtBasisPoints():(uint256)",
      [],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  maxGasPrice(): BigInt {
    let result = super.call("maxGasPrice", "maxGasPrice():(uint256)", []);

    return result[0].toBigInt();
  }

  try_maxGasPrice(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("maxGasPrice", "maxGasPrice():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  maxLeverage(): BigInt {
    let result = super.call("maxLeverage", "maxLeverage():(uint256)", []);

    return result[0].toBigInt();
  }

  try_maxLeverage(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("maxLeverage", "maxLeverage():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  maxUsdgBatchSize(): BigInt {
    let result = super.call(
      "maxUsdgBatchSize",
      "maxUsdgBatchSize():(uint256)",
      [],
    );

    return result[0].toBigInt();
  }

  try_maxUsdgBatchSize(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "maxUsdgBatchSize",
      "maxUsdgBatchSize():(uint256)",
      [],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  maxUsdgBuffer(): BigInt {
    let result = super.call("maxUsdgBuffer", "maxUsdgBuffer():(uint256)", []);

    return result[0].toBigInt();
  }

  try_maxUsdgBuffer(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "maxUsdgBuffer",
      "maxUsdgBuffer():(uint256)",
      [],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  minProfitBasisPoints(param0: Address): BigInt {
    let result = super.call(
      "minProfitBasisPoints",
      "minProfitBasisPoints(address):(uint256)",
      [ethereum.Value.fromAddress(param0)],
    );

    return result[0].toBigInt();
  }

  try_minProfitBasisPoints(param0: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "minProfitBasisPoints",
      "minProfitBasisPoints(address):(uint256)",
      [ethereum.Value.fromAddress(param0)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  poolAmounts(param0: Address): BigInt {
    let result = super.call("poolAmounts", "poolAmounts(address):(uint256)", [
      ethereum.Value.fromAddress(param0),
    ]);

    return result[0].toBigInt();
  }

  try_poolAmounts(param0: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "poolAmounts",
      "poolAmounts(address):(uint256)",
      [ethereum.Value.fromAddress(param0)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  positions(param0: Bytes): Vault__positionsResult {
    let result = super.call(
      "positions",
      "positions(bytes32):(uint256,uint256,uint256,uint256,uint256,int256)",
      [ethereum.Value.fromFixedBytes(param0)],
    );

    return new Vault__positionsResult(
      result[0].toBigInt(),
      result[1].toBigInt(),
      result[2].toBigInt(),
      result[3].toBigInt(),
      result[4].toBigInt(),
      result[5].toBigInt(),
    );
  }

  try_positions(param0: Bytes): ethereum.CallResult<Vault__positionsResult> {
    let result = super.tryCall(
      "positions",
      "positions(bytes32):(uint256,uint256,uint256,uint256,uint256,int256)",
      [ethereum.Value.fromFixedBytes(param0)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new Vault__positionsResult(
        value[0].toBigInt(),
        value[1].toBigInt(),
        value[2].toBigInt(),
        value[3].toBigInt(),
        value[4].toBigInt(),
        value[5].toBigInt(),
      ),
    );
  }

  priceFeed(): Address {
    let result = super.call("priceFeed", "priceFeed():(address)", []);

    return result[0].toAddress();
  }

  try_priceFeed(): ethereum.CallResult<Address> {
    let result = super.tryCall("priceFeed", "priceFeed():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  redemptionBasisPoints(param0: Address): BigInt {
    let result = super.call(
      "redemptionBasisPoints",
      "redemptionBasisPoints(address):(uint256)",
      [ethereum.Value.fromAddress(param0)],
    );

    return result[0].toBigInt();
  }

  try_redemptionBasisPoints(param0: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "redemptionBasisPoints",
      "redemptionBasisPoints(address):(uint256)",
      [ethereum.Value.fromAddress(param0)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  reservedAmounts(param0: Address): BigInt {
    let result = super.call(
      "reservedAmounts",
      "reservedAmounts(address):(uint256)",
      [ethereum.Value.fromAddress(param0)],
    );

    return result[0].toBigInt();
  }

  try_reservedAmounts(param0: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "reservedAmounts",
      "reservedAmounts(address):(uint256)",
      [ethereum.Value.fromAddress(param0)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  router(): Address {
    let result = super.call("router", "router():(address)", []);

    return result[0].toAddress();
  }

  try_router(): ethereum.CallResult<Address> {
    let result = super.tryCall("router", "router():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  sellUSDG(_token: Address, _receiver: Address): BigInt {
    let result = super.call("sellUSDG", "sellUSDG(address,address):(uint256)", [
      ethereum.Value.fromAddress(_token),
      ethereum.Value.fromAddress(_receiver),
    ]);

    return result[0].toBigInt();
  }

  try_sellUSDG(
    _token: Address,
    _receiver: Address,
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "sellUSDG",
      "sellUSDG(address,address):(uint256)",
      [
        ethereum.Value.fromAddress(_token),
        ethereum.Value.fromAddress(_receiver),
      ],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  shortableTokens(param0: Address): boolean {
    let result = super.call(
      "shortableTokens",
      "shortableTokens(address):(bool)",
      [ethereum.Value.fromAddress(param0)],
    );

    return result[0].toBoolean();
  }

  try_shortableTokens(param0: Address): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "shortableTokens",
      "shortableTokens(address):(bool)",
      [ethereum.Value.fromAddress(param0)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  stableSwapFeeBasisPoints(): BigInt {
    let result = super.call(
      "stableSwapFeeBasisPoints",
      "stableSwapFeeBasisPoints():(uint256)",
      [],
    );

    return result[0].toBigInt();
  }

  try_stableSwapFeeBasisPoints(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "stableSwapFeeBasisPoints",
      "stableSwapFeeBasisPoints():(uint256)",
      [],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  stableTokens(param0: Address): boolean {
    let result = super.call("stableTokens", "stableTokens(address):(bool)", [
      ethereum.Value.fromAddress(param0),
    ]);

    return result[0].toBoolean();
  }

  try_stableTokens(param0: Address): ethereum.CallResult<boolean> {
    let result = super.tryCall("stableTokens", "stableTokens(address):(bool)", [
      ethereum.Value.fromAddress(param0),
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  swap(_tokenIn: Address, _tokenOut: Address, _receiver: Address): BigInt {
    let result = super.call("swap", "swap(address,address,address):(uint256)", [
      ethereum.Value.fromAddress(_tokenIn),
      ethereum.Value.fromAddress(_tokenOut),
      ethereum.Value.fromAddress(_receiver),
    ]);

    return result[0].toBigInt();
  }

  try_swap(
    _tokenIn: Address,
    _tokenOut: Address,
    _receiver: Address,
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "swap",
      "swap(address,address,address):(uint256)",
      [
        ethereum.Value.fromAddress(_tokenIn),
        ethereum.Value.fromAddress(_tokenOut),
        ethereum.Value.fromAddress(_receiver),
      ],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  swapFeeBasisPoints(): BigInt {
    let result = super.call(
      "swapFeeBasisPoints",
      "swapFeeBasisPoints():(uint256)",
      [],
    );

    return result[0].toBigInt();
  }

  try_swapFeeBasisPoints(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "swapFeeBasisPoints",
      "swapFeeBasisPoints():(uint256)",
      [],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  tokenBalances(param0: Address): BigInt {
    let result = super.call(
      "tokenBalances",
      "tokenBalances(address):(uint256)",
      [ethereum.Value.fromAddress(param0)],
    );

    return result[0].toBigInt();
  }

  try_tokenBalances(param0: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "tokenBalances",
      "tokenBalances(address):(uint256)",
      [ethereum.Value.fromAddress(param0)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  tokenDecimals(param0: Address): BigInt {
    let result = super.call(
      "tokenDecimals",
      "tokenDecimals(address):(uint256)",
      [ethereum.Value.fromAddress(param0)],
    );

    return result[0].toBigInt();
  }

  try_tokenDecimals(param0: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "tokenDecimals",
      "tokenDecimals(address):(uint256)",
      [ethereum.Value.fromAddress(param0)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  tokenToUsdMax(_token: Address, _tokenAmount: BigInt): BigInt {
    let result = super.call(
      "tokenToUsdMax",
      "tokenToUsdMax(address,uint256):(uint256)",
      [
        ethereum.Value.fromAddress(_token),
        ethereum.Value.fromUnsignedBigInt(_tokenAmount),
      ],
    );

    return result[0].toBigInt();
  }

  try_tokenToUsdMax(
    _token: Address,
    _tokenAmount: BigInt,
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "tokenToUsdMax",
      "tokenToUsdMax(address,uint256):(uint256)",
      [
        ethereum.Value.fromAddress(_token),
        ethereum.Value.fromUnsignedBigInt(_tokenAmount),
      ],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  tokenToUsdMin(_token: Address, _tokenAmount: BigInt): BigInt {
    let result = super.call(
      "tokenToUsdMin",
      "tokenToUsdMin(address,uint256):(uint256)",
      [
        ethereum.Value.fromAddress(_token),
        ethereum.Value.fromUnsignedBigInt(_tokenAmount),
      ],
    );

    return result[0].toBigInt();
  }

  try_tokenToUsdMin(
    _token: Address,
    _tokenAmount: BigInt,
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "tokenToUsdMin",
      "tokenToUsdMin(address,uint256):(uint256)",
      [
        ethereum.Value.fromAddress(_token),
        ethereum.Value.fromUnsignedBigInt(_tokenAmount),
      ],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  usdToToken(_token: Address, _usdAmount: BigInt, _price: BigInt): BigInt {
    let result = super.call(
      "usdToToken",
      "usdToToken(address,uint256,uint256):(uint256)",
      [
        ethereum.Value.fromAddress(_token),
        ethereum.Value.fromUnsignedBigInt(_usdAmount),
        ethereum.Value.fromUnsignedBigInt(_price),
      ],
    );

    return result[0].toBigInt();
  }

  try_usdToToken(
    _token: Address,
    _usdAmount: BigInt,
    _price: BigInt,
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "usdToToken",
      "usdToToken(address,uint256,uint256):(uint256)",
      [
        ethereum.Value.fromAddress(_token),
        ethereum.Value.fromUnsignedBigInt(_usdAmount),
        ethereum.Value.fromUnsignedBigInt(_price),
      ],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  usdToTokenMax(_token: Address, _usdAmount: BigInt): BigInt {
    let result = super.call(
      "usdToTokenMax",
      "usdToTokenMax(address,uint256):(uint256)",
      [
        ethereum.Value.fromAddress(_token),
        ethereum.Value.fromUnsignedBigInt(_usdAmount),
      ],
    );

    return result[0].toBigInt();
  }

  try_usdToTokenMax(
    _token: Address,
    _usdAmount: BigInt,
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "usdToTokenMax",
      "usdToTokenMax(address,uint256):(uint256)",
      [
        ethereum.Value.fromAddress(_token),
        ethereum.Value.fromUnsignedBigInt(_usdAmount),
      ],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  usdToTokenMin(_token: Address, _usdAmount: BigInt): BigInt {
    let result = super.call(
      "usdToTokenMin",
      "usdToTokenMin(address,uint256):(uint256)",
      [
        ethereum.Value.fromAddress(_token),
        ethereum.Value.fromUnsignedBigInt(_usdAmount),
      ],
    );

    return result[0].toBigInt();
  }

  try_usdToTokenMin(
    _token: Address,
    _usdAmount: BigInt,
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "usdToTokenMin",
      "usdToTokenMin(address,uint256):(uint256)",
      [
        ethereum.Value.fromAddress(_token),
        ethereum.Value.fromUnsignedBigInt(_usdAmount),
      ],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  usdg(): Address {
    let result = super.call("usdg", "usdg():(address)", []);

    return result[0].toAddress();
  }

  try_usdg(): ethereum.CallResult<Address> {
    let result = super.tryCall("usdg", "usdg():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  usdgAmounts(param0: Address): BigInt {
    let result = super.call("usdgAmounts", "usdgAmounts(address):(uint256)", [
      ethereum.Value.fromAddress(param0),
    ]);

    return result[0].toBigInt();
  }

  try_usdgAmounts(param0: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "usdgAmounts",
      "usdgAmounts(address):(uint256)",
      [ethereum.Value.fromAddress(param0)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  validateLiquidation(
    _account: Address,
    _collateralToken: Address,
    _indexToken: Address,
    _isLong: boolean,
    _raise: boolean,
  ): Vault__validateLiquidationResult {
    let result = super.call(
      "validateLiquidation",
      "validateLiquidation(address,address,address,bool,bool):(bool,uint256)",
      [
        ethereum.Value.fromAddress(_account),
        ethereum.Value.fromAddress(_collateralToken),
        ethereum.Value.fromAddress(_indexToken),
        ethereum.Value.fromBoolean(_isLong),
        ethereum.Value.fromBoolean(_raise),
      ],
    );

    return new Vault__validateLiquidationResult(
      result[0].toBoolean(),
      result[1].toBigInt(),
    );
  }

  try_validateLiquidation(
    _account: Address,
    _collateralToken: Address,
    _indexToken: Address,
    _isLong: boolean,
    _raise: boolean,
  ): ethereum.CallResult<Vault__validateLiquidationResult> {
    let result = super.tryCall(
      "validateLiquidation",
      "validateLiquidation(address,address,address,bool,bool):(bool,uint256)",
      [
        ethereum.Value.fromAddress(_account),
        ethereum.Value.fromAddress(_collateralToken),
        ethereum.Value.fromAddress(_indexToken),
        ethereum.Value.fromBoolean(_isLong),
        ethereum.Value.fromBoolean(_raise),
      ],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new Vault__validateLiquidationResult(
        value[0].toBoolean(),
        value[1].toBigInt(),
      ),
    );
  }

  whitelistedTokenCount(): BigInt {
    let result = super.call(
      "whitelistedTokenCount",
      "whitelistedTokenCount():(uint256)",
      [],
    );

    return result[0].toBigInt();
  }

  try_whitelistedTokenCount(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "whitelistedTokenCount",
      "whitelistedTokenCount():(uint256)",
      [],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  whitelistedTokens(param0: Address): boolean {
    let result = super.call(
      "whitelistedTokens",
      "whitelistedTokens(address):(bool)",
      [ethereum.Value.fromAddress(param0)],
    );

    return result[0].toBoolean();
  }

  try_whitelistedTokens(param0: Address): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "whitelistedTokens",
      "whitelistedTokens(address):(bool)",
      [ethereum.Value.fromAddress(param0)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  withdrawFees(_token: Address, _receiver: Address): BigInt {
    let result = super.call(
      "withdrawFees",
      "withdrawFees(address,address):(uint256)",
      [
        ethereum.Value.fromAddress(_token),
        ethereum.Value.fromAddress(_receiver),
      ],
    );

    return result[0].toBigInt();
  }

  try_withdrawFees(
    _token: Address,
    _receiver: Address,
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "withdrawFees",
      "withdrawFees(address,address):(uint256)",
      [
        ethereum.Value.fromAddress(_token),
        ethereum.Value.fromAddress(_receiver),
      ],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }
}

export class ConstructorCall extends ethereum.Call {
  get inputs(): ConstructorCall__Inputs {
    return new ConstructorCall__Inputs(this);
  }

  get outputs(): ConstructorCall__Outputs {
    return new ConstructorCall__Outputs(this);
  }
}

export class ConstructorCall__Inputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class ConstructorCall__Outputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class AddRouterCall extends ethereum.Call {
  get inputs(): AddRouterCall__Inputs {
    return new AddRouterCall__Inputs(this);
  }

  get outputs(): AddRouterCall__Outputs {
    return new AddRouterCall__Outputs(this);
  }
}

export class AddRouterCall__Inputs {
  _call: AddRouterCall;

  constructor(call: AddRouterCall) {
    this._call = call;
  }

  get _router(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class AddRouterCall__Outputs {
  _call: AddRouterCall;

  constructor(call: AddRouterCall) {
    this._call = call;
  }
}

export class BuyUSDGCall extends ethereum.Call {
  get inputs(): BuyUSDGCall__Inputs {
    return new BuyUSDGCall__Inputs(this);
  }

  get outputs(): BuyUSDGCall__Outputs {
    return new BuyUSDGCall__Outputs(this);
  }
}

export class BuyUSDGCall__Inputs {
  _call: BuyUSDGCall;

  constructor(call: BuyUSDGCall) {
    this._call = call;
  }

  get _token(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _receiver(): Address {
    return this._call.inputValues[1].value.toAddress();
  }
}

export class BuyUSDGCall__Outputs {
  _call: BuyUSDGCall;

  constructor(call: BuyUSDGCall) {
    this._call = call;
  }

  get value0(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class ClearTokenConfigCall extends ethereum.Call {
  get inputs(): ClearTokenConfigCall__Inputs {
    return new ClearTokenConfigCall__Inputs(this);
  }

  get outputs(): ClearTokenConfigCall__Outputs {
    return new ClearTokenConfigCall__Outputs(this);
  }
}

export class ClearTokenConfigCall__Inputs {
  _call: ClearTokenConfigCall;

  constructor(call: ClearTokenConfigCall) {
    this._call = call;
  }

  get _token(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class ClearTokenConfigCall__Outputs {
  _call: ClearTokenConfigCall;

  constructor(call: ClearTokenConfigCall) {
    this._call = call;
  }
}

export class DecreasePositionCall extends ethereum.Call {
  get inputs(): DecreasePositionCall__Inputs {
    return new DecreasePositionCall__Inputs(this);
  }

  get outputs(): DecreasePositionCall__Outputs {
    return new DecreasePositionCall__Outputs(this);
  }
}

export class DecreasePositionCall__Inputs {
  _call: DecreasePositionCall;

  constructor(call: DecreasePositionCall) {
    this._call = call;
  }

  get _account(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _collateralToken(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get _indexToken(): Address {
    return this._call.inputValues[2].value.toAddress();
  }

  get _collateralDelta(): BigInt {
    return this._call.inputValues[3].value.toBigInt();
  }

  get _sizeDelta(): BigInt {
    return this._call.inputValues[4].value.toBigInt();
  }

  get _isLong(): boolean {
    return this._call.inputValues[5].value.toBoolean();
  }

  get _receiver(): Address {
    return this._call.inputValues[6].value.toAddress();
  }
}

export class DecreasePositionCall__Outputs {
  _call: DecreasePositionCall;

  constructor(call: DecreasePositionCall) {
    this._call = call;
  }

  get value0(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class DirectPoolDepositCall extends ethereum.Call {
  get inputs(): DirectPoolDepositCall__Inputs {
    return new DirectPoolDepositCall__Inputs(this);
  }

  get outputs(): DirectPoolDepositCall__Outputs {
    return new DirectPoolDepositCall__Outputs(this);
  }
}

export class DirectPoolDepositCall__Inputs {
  _call: DirectPoolDepositCall;

  constructor(call: DirectPoolDepositCall) {
    this._call = call;
  }

  get _token(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class DirectPoolDepositCall__Outputs {
  _call: DirectPoolDepositCall;

  constructor(call: DirectPoolDepositCall) {
    this._call = call;
  }
}

export class IncreasePositionCall extends ethereum.Call {
  get inputs(): IncreasePositionCall__Inputs {
    return new IncreasePositionCall__Inputs(this);
  }

  get outputs(): IncreasePositionCall__Outputs {
    return new IncreasePositionCall__Outputs(this);
  }
}

export class IncreasePositionCall__Inputs {
  _call: IncreasePositionCall;

  constructor(call: IncreasePositionCall) {
    this._call = call;
  }

  get _account(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _collateralToken(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get _indexToken(): Address {
    return this._call.inputValues[2].value.toAddress();
  }

  get _sizeDelta(): BigInt {
    return this._call.inputValues[3].value.toBigInt();
  }

  get _isLong(): boolean {
    return this._call.inputValues[4].value.toBoolean();
  }
}

export class IncreasePositionCall__Outputs {
  _call: IncreasePositionCall;

  constructor(call: IncreasePositionCall) {
    this._call = call;
  }
}

export class InitializeCall extends ethereum.Call {
  get inputs(): InitializeCall__Inputs {
    return new InitializeCall__Inputs(this);
  }

  get outputs(): InitializeCall__Outputs {
    return new InitializeCall__Outputs(this);
  }
}

export class InitializeCall__Inputs {
  _call: InitializeCall;

  constructor(call: InitializeCall) {
    this._call = call;
  }

  get _router(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _usdg(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get _priceFeed(): Address {
    return this._call.inputValues[2].value.toAddress();
  }

  get _maxUsdgBatchSize(): BigInt {
    return this._call.inputValues[3].value.toBigInt();
  }

  get _maxUsdgBuffer(): BigInt {
    return this._call.inputValues[4].value.toBigInt();
  }

  get _liquidationFeeUsd(): BigInt {
    return this._call.inputValues[5].value.toBigInt();
  }

  get _fundingRateFactor(): BigInt {
    return this._call.inputValues[6].value.toBigInt();
  }

  get _maxGasPrice(): BigInt {
    return this._call.inputValues[7].value.toBigInt();
  }

  get _maxDebtBasisPoints(): BigInt {
    return this._call.inputValues[8].value.toBigInt();
  }
}

export class InitializeCall__Outputs {
  _call: InitializeCall;

  constructor(call: InitializeCall) {
    this._call = call;
  }
}

export class LiquidatePositionCall extends ethereum.Call {
  get inputs(): LiquidatePositionCall__Inputs {
    return new LiquidatePositionCall__Inputs(this);
  }

  get outputs(): LiquidatePositionCall__Outputs {
    return new LiquidatePositionCall__Outputs(this);
  }
}

export class LiquidatePositionCall__Inputs {
  _call: LiquidatePositionCall;

  constructor(call: LiquidatePositionCall) {
    this._call = call;
  }

  get _account(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _collateralToken(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get _indexToken(): Address {
    return this._call.inputValues[2].value.toAddress();
  }

  get _isLong(): boolean {
    return this._call.inputValues[3].value.toBoolean();
  }

  get _feeReceiver(): Address {
    return this._call.inputValues[4].value.toAddress();
  }
}

export class LiquidatePositionCall__Outputs {
  _call: LiquidatePositionCall;

  constructor(call: LiquidatePositionCall) {
    this._call = call;
  }
}

export class RemoveRouterCall extends ethereum.Call {
  get inputs(): RemoveRouterCall__Inputs {
    return new RemoveRouterCall__Inputs(this);
  }

  get outputs(): RemoveRouterCall__Outputs {
    return new RemoveRouterCall__Outputs(this);
  }
}

export class RemoveRouterCall__Inputs {
  _call: RemoveRouterCall;

  constructor(call: RemoveRouterCall) {
    this._call = call;
  }

  get _router(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class RemoveRouterCall__Outputs {
  _call: RemoveRouterCall;

  constructor(call: RemoveRouterCall) {
    this._call = call;
  }
}

export class SellUSDGCall extends ethereum.Call {
  get inputs(): SellUSDGCall__Inputs {
    return new SellUSDGCall__Inputs(this);
  }

  get outputs(): SellUSDGCall__Outputs {
    return new SellUSDGCall__Outputs(this);
  }
}

export class SellUSDGCall__Inputs {
  _call: SellUSDGCall;

  constructor(call: SellUSDGCall) {
    this._call = call;
  }

  get _token(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _receiver(): Address {
    return this._call.inputValues[1].value.toAddress();
  }
}

export class SellUSDGCall__Outputs {
  _call: SellUSDGCall;

  constructor(call: SellUSDGCall) {
    this._call = call;
  }

  get value0(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class SetFeesCall extends ethereum.Call {
  get inputs(): SetFeesCall__Inputs {
    return new SetFeesCall__Inputs(this);
  }

  get outputs(): SetFeesCall__Outputs {
    return new SetFeesCall__Outputs(this);
  }
}

export class SetFeesCall__Inputs {
  _call: SetFeesCall;

  constructor(call: SetFeesCall) {
    this._call = call;
  }

  get _swapFeeBasisPoints(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get _stableSwapFeeBasisPoints(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get _marginFeeBasisPoints(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get _liquidationFeeUsd(): BigInt {
    return this._call.inputValues[3].value.toBigInt();
  }
}

export class SetFeesCall__Outputs {
  _call: SetFeesCall;

  constructor(call: SetFeesCall) {
    this._call = call;
  }
}

export class SetFundingRateCall extends ethereum.Call {
  get inputs(): SetFundingRateCall__Inputs {
    return new SetFundingRateCall__Inputs(this);
  }

  get outputs(): SetFundingRateCall__Outputs {
    return new SetFundingRateCall__Outputs(this);
  }
}

export class SetFundingRateCall__Inputs {
  _call: SetFundingRateCall;

  constructor(call: SetFundingRateCall) {
    this._call = call;
  }

  get _fundingInterval(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get _fundingRateFactor(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class SetFundingRateCall__Outputs {
  _call: SetFundingRateCall;

  constructor(call: SetFundingRateCall) {
    this._call = call;
  }
}

export class SetGovCall extends ethereum.Call {
  get inputs(): SetGovCall__Inputs {
    return new SetGovCall__Inputs(this);
  }

  get outputs(): SetGovCall__Outputs {
    return new SetGovCall__Outputs(this);
  }
}

export class SetGovCall__Inputs {
  _call: SetGovCall;

  constructor(call: SetGovCall) {
    this._call = call;
  }

  get _gov(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class SetGovCall__Outputs {
  _call: SetGovCall;

  constructor(call: SetGovCall) {
    this._call = call;
  }
}

export class SetIsMintingEnabledCall extends ethereum.Call {
  get inputs(): SetIsMintingEnabledCall__Inputs {
    return new SetIsMintingEnabledCall__Inputs(this);
  }

  get outputs(): SetIsMintingEnabledCall__Outputs {
    return new SetIsMintingEnabledCall__Outputs(this);
  }
}

export class SetIsMintingEnabledCall__Inputs {
  _call: SetIsMintingEnabledCall;

  constructor(call: SetIsMintingEnabledCall) {
    this._call = call;
  }

  get _isMintingEnabled(): boolean {
    return this._call.inputValues[0].value.toBoolean();
  }
}

export class SetIsMintingEnabledCall__Outputs {
  _call: SetIsMintingEnabledCall;

  constructor(call: SetIsMintingEnabledCall) {
    this._call = call;
  }
}

export class SetIsSwapEnabledCall extends ethereum.Call {
  get inputs(): SetIsSwapEnabledCall__Inputs {
    return new SetIsSwapEnabledCall__Inputs(this);
  }

  get outputs(): SetIsSwapEnabledCall__Outputs {
    return new SetIsSwapEnabledCall__Outputs(this);
  }
}

export class SetIsSwapEnabledCall__Inputs {
  _call: SetIsSwapEnabledCall;

  constructor(call: SetIsSwapEnabledCall) {
    this._call = call;
  }

  get _isSwapEnabled(): boolean {
    return this._call.inputValues[0].value.toBoolean();
  }
}

export class SetIsSwapEnabledCall__Outputs {
  _call: SetIsSwapEnabledCall;

  constructor(call: SetIsSwapEnabledCall) {
    this._call = call;
  }
}

export class SetMaxDebtBasisPointsCall extends ethereum.Call {
  get inputs(): SetMaxDebtBasisPointsCall__Inputs {
    return new SetMaxDebtBasisPointsCall__Inputs(this);
  }

  get outputs(): SetMaxDebtBasisPointsCall__Outputs {
    return new SetMaxDebtBasisPointsCall__Outputs(this);
  }
}

export class SetMaxDebtBasisPointsCall__Inputs {
  _call: SetMaxDebtBasisPointsCall;

  constructor(call: SetMaxDebtBasisPointsCall) {
    this._call = call;
  }

  get _maxDebtBasisPoints(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class SetMaxDebtBasisPointsCall__Outputs {
  _call: SetMaxDebtBasisPointsCall;

  constructor(call: SetMaxDebtBasisPointsCall) {
    this._call = call;
  }
}

export class SetMaxGasPriceCall extends ethereum.Call {
  get inputs(): SetMaxGasPriceCall__Inputs {
    return new SetMaxGasPriceCall__Inputs(this);
  }

  get outputs(): SetMaxGasPriceCall__Outputs {
    return new SetMaxGasPriceCall__Outputs(this);
  }
}

export class SetMaxGasPriceCall__Inputs {
  _call: SetMaxGasPriceCall;

  constructor(call: SetMaxGasPriceCall) {
    this._call = call;
  }

  get _maxGasPrice(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class SetMaxGasPriceCall__Outputs {
  _call: SetMaxGasPriceCall;

  constructor(call: SetMaxGasPriceCall) {
    this._call = call;
  }
}

export class SetMaxLeverageCall extends ethereum.Call {
  get inputs(): SetMaxLeverageCall__Inputs {
    return new SetMaxLeverageCall__Inputs(this);
  }

  get outputs(): SetMaxLeverageCall__Outputs {
    return new SetMaxLeverageCall__Outputs(this);
  }
}

export class SetMaxLeverageCall__Inputs {
  _call: SetMaxLeverageCall;

  constructor(call: SetMaxLeverageCall) {
    this._call = call;
  }

  get _maxLeverage(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class SetMaxLeverageCall__Outputs {
  _call: SetMaxLeverageCall;

  constructor(call: SetMaxLeverageCall) {
    this._call = call;
  }
}

export class SetMaxUsdgCall extends ethereum.Call {
  get inputs(): SetMaxUsdgCall__Inputs {
    return new SetMaxUsdgCall__Inputs(this);
  }

  get outputs(): SetMaxUsdgCall__Outputs {
    return new SetMaxUsdgCall__Outputs(this);
  }
}

export class SetMaxUsdgCall__Inputs {
  _call: SetMaxUsdgCall;

  constructor(call: SetMaxUsdgCall) {
    this._call = call;
  }

  get _maxUsdgBatchSize(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get _maxUsdgBuffer(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class SetMaxUsdgCall__Outputs {
  _call: SetMaxUsdgCall;

  constructor(call: SetMaxUsdgCall) {
    this._call = call;
  }
}

export class SetPriceFeedCall extends ethereum.Call {
  get inputs(): SetPriceFeedCall__Inputs {
    return new SetPriceFeedCall__Inputs(this);
  }

  get outputs(): SetPriceFeedCall__Outputs {
    return new SetPriceFeedCall__Outputs(this);
  }
}

export class SetPriceFeedCall__Inputs {
  _call: SetPriceFeedCall;

  constructor(call: SetPriceFeedCall) {
    this._call = call;
  }

  get _priceFeed(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class SetPriceFeedCall__Outputs {
  _call: SetPriceFeedCall;

  constructor(call: SetPriceFeedCall) {
    this._call = call;
  }
}

export class SetTokenConfigCall extends ethereum.Call {
  get inputs(): SetTokenConfigCall__Inputs {
    return new SetTokenConfigCall__Inputs(this);
  }

  get outputs(): SetTokenConfigCall__Outputs {
    return new SetTokenConfigCall__Outputs(this);
  }
}

export class SetTokenConfigCall__Inputs {
  _call: SetTokenConfigCall;

  constructor(call: SetTokenConfigCall) {
    this._call = call;
  }

  get _token(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _tokenDecimals(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get _redemptionBps(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get _minProfitBps(): BigInt {
    return this._call.inputValues[3].value.toBigInt();
  }

  get _isStable(): boolean {
    return this._call.inputValues[4].value.toBoolean();
  }

  get _isShortable(): boolean {
    return this._call.inputValues[5].value.toBoolean();
  }
}

export class SetTokenConfigCall__Outputs {
  _call: SetTokenConfigCall;

  constructor(call: SetTokenConfigCall) {
    this._call = call;
  }
}

export class SwapCall extends ethereum.Call {
  get inputs(): SwapCall__Inputs {
    return new SwapCall__Inputs(this);
  }

  get outputs(): SwapCall__Outputs {
    return new SwapCall__Outputs(this);
  }
}

export class SwapCall__Inputs {
  _call: SwapCall;

  constructor(call: SwapCall) {
    this._call = call;
  }

  get _tokenIn(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _tokenOut(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get _receiver(): Address {
    return this._call.inputValues[2].value.toAddress();
  }
}

export class SwapCall__Outputs {
  _call: SwapCall;

  constructor(call: SwapCall) {
    this._call = call;
  }

  get value0(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class UpdateCumulativeFundingRateCall extends ethereum.Call {
  get inputs(): UpdateCumulativeFundingRateCall__Inputs {
    return new UpdateCumulativeFundingRateCall__Inputs(this);
  }

  get outputs(): UpdateCumulativeFundingRateCall__Outputs {
    return new UpdateCumulativeFundingRateCall__Outputs(this);
  }
}

export class UpdateCumulativeFundingRateCall__Inputs {
  _call: UpdateCumulativeFundingRateCall;

  constructor(call: UpdateCumulativeFundingRateCall) {
    this._call = call;
  }

  get _token(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class UpdateCumulativeFundingRateCall__Outputs {
  _call: UpdateCumulativeFundingRateCall;

  constructor(call: UpdateCumulativeFundingRateCall) {
    this._call = call;
  }
}

export class WithdrawFeesCall extends ethereum.Call {
  get inputs(): WithdrawFeesCall__Inputs {
    return new WithdrawFeesCall__Inputs(this);
  }

  get outputs(): WithdrawFeesCall__Outputs {
    return new WithdrawFeesCall__Outputs(this);
  }
}

export class WithdrawFeesCall__Inputs {
  _call: WithdrawFeesCall;

  constructor(call: WithdrawFeesCall) {
    this._call = call;
  }

  get _token(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _receiver(): Address {
    return this._call.inputValues[1].value.toAddress();
  }
}

export class WithdrawFeesCall__Outputs {
  _call: WithdrawFeesCall;

  constructor(call: WithdrawFeesCall) {
    this._call = call;
  }

  get value0(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}
